services:
  db:
    image: postgres:latest
    container_name: postgres_container
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    volumes:
      - 'postgres-data:/var/lib/postgresql/data' # монтируем собранные данные в Docker volume
    ports:
      - '5444:5432'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - './prometheus.yml:/etc/prometheus/prometheus.yml' # монтируем конфигурационный файл
      - 'prometheus-data:/prometheus' # монтируем собранные данные в Docker volume
    network_mode: 'host'
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    network_mode: 'host'
    restart: unless-stopped
    volumes:
      - 'loki-data:/loki'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        # Директории для provisioning
        mkdir -p /etc/grafana/provisioning/datasources
        mkdir -p /etc/grafana/provisioning/dashboards
        mkdir -p /var/lib/grafana/dashboards

        # Конфигурация datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://localhost:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          uid: DS_LOKI
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://localhost:9090 
          editable: false
          uid: DS_PROMETHEUS
        EOF

        # Конфигурация dashboards
        cat <<EOF > /etc/grafana/provisioning/dashboards/dashboard.yaml
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            options:
              path: /var/lib/grafana/dashboards
        EOF

        /run.sh
    volumes:
      - ./grafana-dashboards:/var/lib/grafana/dashboards
    network_mode: 'host'
    restart: unless-stopped

volumes:
  postgres-data:
  prometheus-data:
  loki-data:
